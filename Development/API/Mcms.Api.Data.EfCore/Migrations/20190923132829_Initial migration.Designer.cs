// <auto-generated />
using System;
using System.Collections.Generic;
using Mcms.Api.Data.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.EFCore.Migrations
{
    [DbContext(typeof(MCMSContext))]
    [Migration("20190923132829_Initial migration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.Core.Models.Core.GameVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsPreRelease");

                    b.Property<bool>("IsSnapshot");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameVersions");
                });

            modelBuilder.Entity("Data.Core.Models.Core.MappingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MappingTypes");
                });

            modelBuilder.Entity("Data.Core.Models.Core.Release", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("GameVersionId");

                    b.Property<bool>("IsSnapshot");

                    b.Property<Guid>("MappingTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GameVersionId");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.LiveMappingEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Distribution");

                    b.Property<string>("Documentation");

                    b.Property<string>("InputMapping")
                        .IsRequired();

                    b.Property<Guid>("MappingTypeId");

                    b.Property<string>("OutputMapping")
                        .IsRequired();

                    b.Property<Guid>("VersionedComponentId");

                    b.HasKey("Id");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("VersionedComponentId");

                    b.ToTable("LiveMappingEntries");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.LockingEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MappingTypeId");

                    b.Property<Guid>("VersionedComponentId");

                    b.HasKey("Id");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("VersionedComponentId");

                    b.ToTable("LockingEntries");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase", b =>
                {
                    b.Property<Guid>("VersionedComponentForeignKey");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("VersionedComponentForeignKey");

                    b.ToTable("VersionedComponentMetadata");

                    b.HasDiscriminator<string>("Discriminator").HasValue("VersionedComponentMetadataBase");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.ProposalMappingEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClosedBy");

                    b.Property<DateTime?>("ClosedOn");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Distribution");

                    b.Property<string>("Documentation");

                    b.Property<string>("InputMapping")
                        .IsRequired();

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsPublicVote");

                    b.Property<Guid>("MappingTypeId");

                    b.Property<bool?>("Merged");

                    b.Property<string>("OutputMapping")
                        .IsRequired();

                    b.Property<Guid>("ProposedBy");

                    b.Property<DateTime>("ProposedOn");

                    b.Property<Guid>("VersionedComponentId");

                    b.Property<List<Guid>>("VotedAgainst");

                    b.Property<List<Guid>>("VotedFor");

                    b.Property<Guid?>("WentLiveWithId");

                    b.HasKey("Id");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("VersionedComponentId");

                    b.HasIndex("WentLiveWithId")
                        .IsUnique();

                    b.ToTable("ProposalMappingEntries");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.ReleaseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComponentType");

                    b.Property<Guid>("MemberId");

                    b.Property<Guid>("ReleaseId");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("ReleaseComponents");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.VersionedComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComponentId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("GameVersionId");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("VersionedComponents");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.ClassMetadata", b =>
                {
                    b.HasBaseType("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase");

                    b.Property<Guid?>("OuterVersionedComponentForeignKey");

                    b.Property<string>("Package");

                    b.HasIndex("OuterVersionedComponentForeignKey");

                    b.HasDiscriminator().HasValue("ClassMetadata");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.FieldMetadata", b =>
                {
                    b.HasBaseType("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase");

                    b.Property<bool>("IsStatic");

                    b.Property<Guid>("MemberOfVersionedComponentForeignKey");

                    b.HasIndex("MemberOfVersionedComponentForeignKey");

                    b.HasDiscriminator().HasValue("FieldMetadata");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.MethodMetadata", b =>
                {
                    b.HasBaseType("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase");

                    b.Property<string>("Descriptor")
                        .IsRequired();

                    b.Property<bool>("IsStatic")
                        .HasColumnName("MethodMetadata_IsStatic");

                    b.Property<Guid>("MemberOfVersionedComponentForeignKey")
                        .HasColumnName("MethodMetadata_MemberOfVersionedComponentForeignKey");

                    b.HasIndex("MemberOfVersionedComponentForeignKey");

                    b.HasDiscriminator().HasValue("MethodMetadata");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.ParameterMetadata", b =>
                {
                    b.HasBaseType("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase");

                    b.Property<int>("Index");

                    b.Property<Guid>("ParameterOfVersionedComponentForeignKey");

                    b.HasIndex("ParameterOfVersionedComponentForeignKey");

                    b.HasDiscriminator().HasValue("ParameterMetadata");
                });

            modelBuilder.Entity("Data.Core.Models.Core.Release", b =>
                {
                    b.HasOne("Data.Core.Models.Core.GameVersion", "GameVersion")
                        .WithMany()
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Core.MappingType", "MappingType")
                        .WithMany("Releases")
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.LiveMappingEntry", b =>
                {
                    b.HasOne("Data.Core.Models.Core.MappingType", "MappingType")
                        .WithMany()
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Mapping.VersionedComponent", "VersionedComponent")
                        .WithMany("Mappings")
                        .HasForeignKey("VersionedComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.LockingEntry", b =>
                {
                    b.HasOne("Data.Core.Models.Core.MappingType", "MappingType")
                        .WithMany("LockedVersionedComponents")
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Mapping.VersionedComponent", "VersionedComponent")
                        .WithMany("LockedMappingTypes")
                        .HasForeignKey("VersionedComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.VersionedComponent", "VersionedComponent")
                        .WithOne("Metadata")
                        .HasForeignKey("Data.Core.Models.Mapping.Metadata.VersionedComponentMetadataBase", "VersionedComponentForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.ProposalMappingEntry", b =>
                {
                    b.HasOne("Data.Core.Models.Core.MappingType", "MappingType")
                        .WithMany()
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Mapping.VersionedComponent", "VersionedComponent")
                        .WithMany("Proposals")
                        .HasForeignKey("VersionedComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Mapping.LiveMappingEntry", "WentLiveWith")
                        .WithOne("Proposal")
                        .HasForeignKey("Data.Core.Models.Mapping.ProposalMappingEntry", "WentLiveWithId");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.ReleaseComponent", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.LiveMappingEntry", "Member")
                        .WithMany("Releases")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Core.Release", "Release")
                        .WithMany("Components")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.VersionedComponent", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.Component", "Component")
                        .WithMany("VersionedComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Core.Models.Core.GameVersion", "GameVersion")
                        .WithMany()
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.ClassMetadata", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.Metadata.ClassMetadata", "Outer")
                        .WithMany("InheritsFrom")
                        .HasForeignKey("OuterVersionedComponentForeignKey");
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.FieldMetadata", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.Metadata.ClassMetadata", "MemberOf")
                        .WithMany("Fields")
                        .HasForeignKey("MemberOfVersionedComponentForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.MethodMetadata", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.Metadata.ClassMetadata", "MemberOf")
                        .WithMany("Methods")
                        .HasForeignKey("MemberOfVersionedComponentForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Core.Models.Mapping.Metadata.ParameterMetadata", b =>
                {
                    b.HasOne("Data.Core.Models.Mapping.Metadata.MethodMetadata", "ParameterOf")
                        .WithMany("Parameters")
                        .HasForeignKey("ParameterOfVersionedComponentForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Mcms.Api.Data.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.EFCore.Migrations
{
    [DbContext(typeof(MCMSContext))]
    [Migration("20200103202231_FinalDotNetCoreVersion")]
    partial class FinalDotNetCoreVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("HasBeenEdited");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ParentId");

                    b.Property<Guid?>("ProposedMappingId");

                    b.Property<Guid?>("ReleaseId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProposedMappingId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Comments.CommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CommentId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentReaction");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Core.GameVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsPreRelease");

                    b.Property<bool>("IsSnapshot");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameVersions");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Core.MappingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MappingTypes");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Core.Release.Release", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("GameVersionId");

                    b.Property<bool>("IsSnapshot");

                    b.Property<Guid>("MappingTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GameVersionId");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Core.Release.ReleaseComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MappingId");

                    b.Property<Guid>("ReleaseId");

                    b.HasKey("Id");

                    b.HasIndex("MappingId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("ReleaseComponents");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Component.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Component.LockingEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MappingTypeId");

                    b.Property<Guid>("VersionedComponentId");

                    b.HasKey("Id");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("VersionedComponentId");

                    b.ToTable("LockingEntries");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Component.VersionedComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComponentId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("GameVersionId");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("GameVersionId");

                    b.ToTable("VersionedComponents");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Mappings.CommittedMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Distribution");

                    b.Property<string>("Documentation");

                    b.Property<string>("InputMapping")
                        .IsRequired();

                    b.Property<Guid>("MappingTypeId");

                    b.Property<string>("OutputMapping")
                        .IsRequired();

                    b.Property<Guid>("VersionedComponentId");

                    b.HasKey("Id");

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("VersionedComponentId");

                    b.ToTable("LiveMappingEntries");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Mappings.ProposedMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClosedBy");

                    b.Property<DateTime?>("ClosedOn");

                    b.Property<Guid?>("CommittedWithId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Distribution");

                    b.Property<string>("Documentation");

                    b.Property<string>("InputMapping")
                        .IsRequired();

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsPublicVote");

                    b.Property<Guid>("MappingTypeId");

                    b.Property<bool?>("Merged");

                    b.Property<string>("OutputMapping")
                        .IsRequired();

                    b.Property<Guid>("VersionedComponentId");

                    b.HasKey("Id");

                    b.HasIndex("CommittedWithId")
                        .IsUnique();

                    b.HasIndex("MappingTypeId");

                    b.HasIndex("VersionedComponentId");

                    b.ToTable("ProposalMappingEntries");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Mappings.Voting.VotingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("HasBeenRescinded");

                    b.Property<bool>("IsForVote");

                    b.Property<Guid>("ProposalId");

                    b.Property<Guid>("VotedBy");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("VotingRecord");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassInheritanceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("SubclassId");

                    b.Property<Guid?>("SuperclassId");

                    b.HasKey("Id");

                    b.HasIndex("SubclassId");

                    b.HasIndex("SuperclassId");

                    b.ToTable("ClassInheritanceData");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("VersionedComponentMetadata");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MetadataBase");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", b =>
                {
                    b.HasBaseType("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase");

                    b.Property<Guid?>("OuterId");

                    b.Property<Guid?>("PackageId");

                    b.HasIndex("OuterId");

                    b.HasIndex("PackageId");

                    b.HasDiscriminator().HasValue("ClassMetadata");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.FieldMetadata", b =>
                {
                    b.HasBaseType("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase");

                    b.Property<bool>("IsStatic");

                    b.Property<Guid>("MemberOfId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasIndex("MemberOfId");

                    b.HasDiscriminator().HasValue("FieldMetadata");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MethodMetadata", b =>
                {
                    b.HasBaseType("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase");

                    b.Property<string>("Descriptor")
                        .IsRequired();

                    b.Property<bool>("IsStatic")
                        .HasColumnName("MethodMetadata_IsStatic");

                    b.Property<Guid>("MemberOfId")
                        .HasColumnName("MethodMetadata_MemberOfId");

                    b.HasIndex("MemberOfId");

                    b.HasDiscriminator().HasValue("MethodMetadata");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.PackageMetadata", b =>
                {
                    b.HasBaseType("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase");

                    b.Property<Guid?>("ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("PackageMetadata");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ParameterMetadata", b =>
                {
                    b.HasBaseType("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase");

                    b.Property<int>("Index");

                    b.Property<Guid>("ParameterOfId");

                    b.HasIndex("ParameterOfId");

                    b.HasDiscriminator().HasValue("ParameterMetadata");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Comments.Comment", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Comments.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Mappings.ProposedMapping", "ProposedMapping")
                        .WithMany("Comments")
                        .HasForeignKey("ProposedMappingId");

                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.Release.Release", "Release")
                        .WithMany("Comments")
                        .HasForeignKey("ReleaseId");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Comments.CommentReaction", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Comments.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Core.Release.Release", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.GameVersion", "GameVersion")
                        .WithMany()
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.MappingType", "MappingType")
                        .WithMany("Releases")
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Core.Release.ReleaseComponent", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Mappings.CommittedMapping", "Mapping")
                        .WithMany("Releases")
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.Release.Release", "Release")
                        .WithMany("Components")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Component.LockingEntry", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.MappingType", "MappingType")
                        .WithMany("LockedVersionedComponents")
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Component.VersionedComponent", "VersionedComponent")
                        .WithMany("LockedMappingTypes")
                        .HasForeignKey("VersionedComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Component.VersionedComponent", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Component.Component", "Component")
                        .WithMany("VersionedComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.GameVersion", "GameVersion")
                        .WithMany()
                        .HasForeignKey("GameVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Mappings.CommittedMapping", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.MappingType", "MappingType")
                        .WithMany()
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Component.VersionedComponent", "VersionedComponent")
                        .WithMany("Mappings")
                        .HasForeignKey("VersionedComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Mappings.ProposedMapping", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Mappings.CommittedMapping", "CommittedWith")
                        .WithOne("ProposedMapping")
                        .HasForeignKey("Mcms.Api.Data.Poco.Models.Mapping.Mappings.ProposedMapping", "CommittedWithId");

                    b.HasOne("Mcms.Api.Data.Poco.Models.Core.MappingType", "MappingType")
                        .WithMany()
                        .HasForeignKey("MappingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Component.VersionedComponent", "VersionedComponent")
                        .WithMany("Proposals")
                        .HasForeignKey("VersionedComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Mappings.Voting.VotingRecord", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Mappings.ProposedMapping", "Proposal")
                        .WithMany("Votes")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassInheritanceData", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", "Subclass")
                        .WithMany("InheritsFrom")
                        .HasForeignKey("SubclassId");

                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", "Superclass")
                        .WithMany("IsInheritedBy")
                        .HasForeignKey("SuperclassId");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Component.VersionedComponent", "VersionedComponent")
                        .WithOne("Metadata")
                        .HasForeignKey("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MetadataBase", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", "Outer")
                        .WithMany("InnerClasses")
                        .HasForeignKey("OuterId");

                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.PackageMetadata", "Package")
                        .WithMany("Classes")
                        .HasForeignKey("PackageId");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.FieldMetadata", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", "MemberOf")
                        .WithMany("Fields")
                        .HasForeignKey("MemberOfId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MethodMetadata", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ClassMetadata", "MemberOf")
                        .WithMany("Methods")
                        .HasForeignKey("MemberOfId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.PackageMetadata", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.PackageMetadata", "Parent")
                        .WithMany("ChildPackages")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Mcms.Api.Data.Poco.Models.Mapping.Metadata.ParameterMetadata", b =>
                {
                    b.HasOne("Mcms.Api.Data.Poco.Models.Mapping.Metadata.MethodMetadata", "ParameterOf")
                        .WithMany("Parameters")
                        .HasForeignKey("ParameterOfId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
